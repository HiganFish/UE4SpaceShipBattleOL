// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerMoveData.proto

#ifndef PROTOBUF_PlayerMoveData_2eproto__INCLUDED
#define PROTOBUF_PlayerMoveData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_PlayerMoveData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPlayerMoveDataImpl();
void InitDefaultsPlayerMoveData();
inline void InitDefaults() {
  InitDefaultsPlayerMoveData();
}
}  // namespace protobuf_PlayerMoveData_2eproto
namespace mongo {
class PlayerMoveData;
class PlayerMoveDataDefaultTypeInternal;
extern PlayerMoveDataDefaultTypeInternal _PlayerMoveData_default_instance_;
}  // namespace mongo
namespace mongo {

// ===================================================================

class PlayerMoveData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mongo.PlayerMoveData) */ {
 public:
  PlayerMoveData();
  virtual ~PlayerMoveData();

  PlayerMoveData(const PlayerMoveData& from);

  inline PlayerMoveData& operator=(const PlayerMoveData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMoveData(PlayerMoveData&& from) noexcept
    : PlayerMoveData() {
    *this = ::std::move(from);
  }

  inline PlayerMoveData& operator=(PlayerMoveData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMoveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMoveData* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveData*>(
               &_PlayerMoveData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PlayerMoveData* other);
  friend void swap(PlayerMoveData& a, PlayerMoveData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveData* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerMoveData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerMoveData& from);
  void MergeFrom(const PlayerMoveData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerMoveData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 move_forward = 4;
  int move_forward_size() const;
  void clear_move_forward();
  static const int kMoveForwardFieldNumber = 4;
  ::google::protobuf::uint32 move_forward(int index) const;
  void set_move_forward(int index, ::google::protobuf::uint32 value);
  void add_move_forward(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      move_forward() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_move_forward();

  // repeated uint32 move_right = 5;
  int move_right_size() const;
  void clear_move_right();
  static const int kMoveRightFieldNumber = 5;
  ::google::protobuf::uint32 move_right(int index) const;
  void set_move_right(int index, ::google::protobuf::uint32 value);
  void add_move_right(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      move_right() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_move_right();

  // repeated int32 angle = 6;
  int angle_size() const;
  void clear_angle();
  static const int kAngleFieldNumber = 6;
  ::google::protobuf::int32 angle(int index) const;
  void set_angle(int index, ::google::protobuf::int32 value);
  void add_angle(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      angle() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_angle();

  // repeated bool fireing = 7;
  int fireing_size() const;
  void clear_fireing();
  static const int kFireingFieldNumber = 7;
  bool fireing(int index) const;
  void set_fireing(int index, bool value);
  void add_fireing(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      fireing() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_fireing();

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string uuid = 2;
  void clear_uuid();
  static const int kUuidFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mongo.PlayerMoveData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > move_forward_;
  mutable int _move_forward_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > move_right_;
  mutable int _move_right_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > angle_;
  mutable int _angle_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > fireing_;
  mutable int _fireing_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_PlayerMoveData_2eproto::TableStruct;
  friend void ::protobuf_PlayerMoveData_2eproto::InitDefaultsPlayerMoveDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerMoveData

// string username = 1;
inline void PlayerMoveData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerMoveData::username() const {
  // @@protoc_insertion_point(field_get:mongo.PlayerMoveData.username)
  return username_.GetNoArena();
}
inline void PlayerMoveData::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mongo.PlayerMoveData.username)
}
#if LANG_CXX11
inline void PlayerMoveData::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mongo.PlayerMoveData.username)
}
#endif
inline void PlayerMoveData::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mongo.PlayerMoveData.username)
}
inline void PlayerMoveData::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mongo.PlayerMoveData.username)
}
inline ::std::string* PlayerMoveData::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:mongo.PlayerMoveData.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMoveData::release_username() {
  // @@protoc_insertion_point(field_release:mongo.PlayerMoveData.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMoveData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:mongo.PlayerMoveData.username)
}

// string uuid = 2;
inline void PlayerMoveData::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerMoveData::uuid() const {
  // @@protoc_insertion_point(field_get:mongo.PlayerMoveData.uuid)
  return uuid_.GetNoArena();
}
inline void PlayerMoveData::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mongo.PlayerMoveData.uuid)
}
#if LANG_CXX11
inline void PlayerMoveData::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mongo.PlayerMoveData.uuid)
}
#endif
inline void PlayerMoveData::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mongo.PlayerMoveData.uuid)
}
inline void PlayerMoveData::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mongo.PlayerMoveData.uuid)
}
inline ::std::string* PlayerMoveData::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:mongo.PlayerMoveData.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMoveData::release_uuid() {
  // @@protoc_insertion_point(field_release:mongo.PlayerMoveData.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMoveData::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:mongo.PlayerMoveData.uuid)
}

// int64 timestamp = 3;
inline void PlayerMoveData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerMoveData::timestamp() const {
  // @@protoc_insertion_point(field_get:mongo.PlayerMoveData.timestamp)
  return timestamp_;
}
inline void PlayerMoveData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:mongo.PlayerMoveData.timestamp)
}

// repeated uint32 move_forward = 4;
inline int PlayerMoveData::move_forward_size() const {
  return move_forward_.size();
}
inline void PlayerMoveData::clear_move_forward() {
  move_forward_.Clear();
}
inline ::google::protobuf::uint32 PlayerMoveData::move_forward(int index) const {
  // @@protoc_insertion_point(field_get:mongo.PlayerMoveData.move_forward)
  return move_forward_.Get(index);
}
inline void PlayerMoveData::set_move_forward(int index, ::google::protobuf::uint32 value) {
  move_forward_.Set(index, value);
  // @@protoc_insertion_point(field_set:mongo.PlayerMoveData.move_forward)
}
inline void PlayerMoveData::add_move_forward(::google::protobuf::uint32 value) {
  move_forward_.Add(value);
  // @@protoc_insertion_point(field_add:mongo.PlayerMoveData.move_forward)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerMoveData::move_forward() const {
  // @@protoc_insertion_point(field_list:mongo.PlayerMoveData.move_forward)
  return move_forward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerMoveData::mutable_move_forward() {
  // @@protoc_insertion_point(field_mutable_list:mongo.PlayerMoveData.move_forward)
  return &move_forward_;
}

// repeated uint32 move_right = 5;
inline int PlayerMoveData::move_right_size() const {
  return move_right_.size();
}
inline void PlayerMoveData::clear_move_right() {
  move_right_.Clear();
}
inline ::google::protobuf::uint32 PlayerMoveData::move_right(int index) const {
  // @@protoc_insertion_point(field_get:mongo.PlayerMoveData.move_right)
  return move_right_.Get(index);
}
inline void PlayerMoveData::set_move_right(int index, ::google::protobuf::uint32 value) {
  move_right_.Set(index, value);
  // @@protoc_insertion_point(field_set:mongo.PlayerMoveData.move_right)
}
inline void PlayerMoveData::add_move_right(::google::protobuf::uint32 value) {
  move_right_.Add(value);
  // @@protoc_insertion_point(field_add:mongo.PlayerMoveData.move_right)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerMoveData::move_right() const {
  // @@protoc_insertion_point(field_list:mongo.PlayerMoveData.move_right)
  return move_right_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerMoveData::mutable_move_right() {
  // @@protoc_insertion_point(field_mutable_list:mongo.PlayerMoveData.move_right)
  return &move_right_;
}

// repeated int32 angle = 6;
inline int PlayerMoveData::angle_size() const {
  return angle_.size();
}
inline void PlayerMoveData::clear_angle() {
  angle_.Clear();
}
inline ::google::protobuf::int32 PlayerMoveData::angle(int index) const {
  // @@protoc_insertion_point(field_get:mongo.PlayerMoveData.angle)
  return angle_.Get(index);
}
inline void PlayerMoveData::set_angle(int index, ::google::protobuf::int32 value) {
  angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:mongo.PlayerMoveData.angle)
}
inline void PlayerMoveData::add_angle(::google::protobuf::int32 value) {
  angle_.Add(value);
  // @@protoc_insertion_point(field_add:mongo.PlayerMoveData.angle)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerMoveData::angle() const {
  // @@protoc_insertion_point(field_list:mongo.PlayerMoveData.angle)
  return angle_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerMoveData::mutable_angle() {
  // @@protoc_insertion_point(field_mutable_list:mongo.PlayerMoveData.angle)
  return &angle_;
}

// repeated bool fireing = 7;
inline int PlayerMoveData::fireing_size() const {
  return fireing_.size();
}
inline void PlayerMoveData::clear_fireing() {
  fireing_.Clear();
}
inline bool PlayerMoveData::fireing(int index) const {
  // @@protoc_insertion_point(field_get:mongo.PlayerMoveData.fireing)
  return fireing_.Get(index);
}
inline void PlayerMoveData::set_fireing(int index, bool value) {
  fireing_.Set(index, value);
  // @@protoc_insertion_point(field_set:mongo.PlayerMoveData.fireing)
}
inline void PlayerMoveData::add_fireing(bool value) {
  fireing_.Add(value);
  // @@protoc_insertion_point(field_add:mongo.PlayerMoveData.fireing)
}
inline const ::google::protobuf::RepeatedField< bool >&
PlayerMoveData::fireing() const {
  // @@protoc_insertion_point(field_list:mongo.PlayerMoveData.fireing)
  return fireing_;
}
inline ::google::protobuf::RepeatedField< bool >*
PlayerMoveData::mutable_fireing() {
  // @@protoc_insertion_point(field_mutable_list:mongo.PlayerMoveData.fireing)
  return &fireing_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mongo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerMoveData_2eproto__INCLUDED
